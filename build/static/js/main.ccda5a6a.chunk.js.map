{"version":3,"sources":["core/services/commonService.js","views/Loader/Loader.js","views/Pages/404/PageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["API_BASE_URL","ApiService","isSubscribed","localStorage","getItem","isSubscribe","toString","setItem","urlSegment","axios","get","headers","formdata","post","put","accessToken","delete","data","Loader","className","role","PageNotFound","Container","Row","Col","md","lg","React","Component","FrontEndLayout","lazy","CommonLayout","UserLayout","AdminLayout","App","Suspense","fallback","path","name","component","PrivateRoute","rest","render","routeProps","commonService","getAuth","renderMergedProps","to","pathname","state","from","location","ProtectedRoute","finalProps","Object","assign","createElement","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ccda5a6a.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst API_BASE_URL = 'http://virtdrop-api.herokuapp.com/'; // 'http://localhost:8082/'; // \r\nconst API_BASE_URL_WITH_OUT_VERSION = 'http://virtdrop-api.herokuapp.com/';\r\nclass ApiService {\r\n\r\n    /*Get Organization Subscribe*/\r\n    getIsSubscribe() {\r\n        let isSubscribed = localStorage.getItem(\"isSubscribed\");\r\n        if(isSubscribed === '' || isSubscribed === null)\r\n          return \"\";\r\n        else\r\n          return ( localStorage.getItem(\"isSubscribed\") === \"true\") ? true : false;\r\n    }\r\n    setIsSubscribe(isSubscribe = \"false\") {\r\n        isSubscribe = isSubscribe.toString();\r\n        localStorage.setItem( 'isSubscribed');\r\n    }\r\n\r\n    /*Get API*/\r\n    getAPI(urlSegment) {\r\n        return axios.get(API_BASE_URL+urlSegment);\r\n    }\r\n    /*Get API With Authentication header */\r\n    getAPIWithAccessToken(urlSegment) {\r\n        const accessToken = localStorage.getItem(\"accessToken\");\r\n        const headers = {\r\n            'Authorization': 'JWT '+accessToken\r\n        }\r\n        return axios.get(API_BASE_URL+urlSegment, {headers: headers});\r\n    }\r\n    /*Post API Without Authentication header */\r\n    postAPI(urlSegment, formdata) {        \r\n        const headers = {\r\n            'Content-Type': 'application/json'           \r\n        }\r\n        return axios.post(API_BASE_URL+urlSegment, formdata, {headers: headers});\r\n    }\r\n    /*Post API With Authentication header */\r\n    postAPIWithAccessToken(urlSegment, formdata){\r\n        const accessToken = localStorage.getItem(\"accessToken\");\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'JWT '+accessToken\r\n        }\r\n        return axios.post(API_BASE_URL+urlSegment, formdata, {headers: headers});\r\n    } \r\n\r\n    /*Post form data API With Authentication header */\r\n    postMultipartDataAPIWithAccessToken(urlSegment, formdata){\r\n        const accessToken = localStorage.getItem(\"accessToken\");\r\n        const headers = {\r\n            'Content-Type': 'multipart/form-data',\r\n            'Authorization': 'JWT '+accessToken\r\n        }\r\n        return axios.post(API_BASE_URL+urlSegment, formdata, {headers: headers} );\r\n    } \r\n\r\n    /*PUt API With Authentication header */\r\n    putAPIWithAccessToken(urlSegment, formdata){\r\n        const accessToken = localStorage.getItem(\"accessToken\");\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'JWT '+accessToken\r\n        }\r\n        return axios.put(API_BASE_URL+urlSegment, formdata, {headers: headers});\r\n    } \r\n\r\n    /*Delete API With Authentication header and Without parameter */\r\n    deleteAPIWithAccessToken(urlSegment, formdata= {}){\r\n        const accessToken = localStorage.getItem(\"accessToken\");\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'JWT '+accessToken\r\n        }\r\n\r\n        //debugger;\r\n        return axios.delete(API_BASE_URL+urlSegment, { headers: headers , data: formdata});\r\n    } \r\n    /* Check user logged in or not */\r\n    getAuth(){\r\n        let accessToken = localStorage.getItem(\"accessToken\");        \r\n        if(accessToken === '' || accessToken === null)\r\n          return false;\r\n        else\r\n          return true;\r\n    }\r\n    /*Get API Url*/\r\n    getAPIUrl(){\r\n        return API_BASE_URL_WITH_OUT_VERSION;\r\n    }\r\n}\r\n\r\nexport default new ApiService();\r\n","import React from 'react';\r\nimport \"./Loader.css\"\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"loaderSection\">\r\n             <div className=\"spinner-border text-primary\" role=\"status\">\r\n                  <span className=\"sr-only\">Loading...</span>\r\n              </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loader;","import React from \"react\";\r\nimport { Container, Row, Col} from 'reactstrap';\r\nimport \"./PageNotFound.css\";\r\n\r\nclass PageNotFound extends React.Component {\r\n  \r\n  render() {\r\n    return (\r\n      <>        \r\n\r\n        <section className=\"main-content\">\r\n            <Container>\r\n                <Row>\r\n                <Col md=\"12\" lg=\"12\">\r\n                    <h2>Page Not Found</h2>\r\n                </Col>\r\n                </Row>\r\n            </Container>\r\n        </section>\r\n            \r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PageNotFound;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\nimport commonService from './core/services/commonService';\r\n\r\nimport './App.css';\r\nimport Loader from './views/Loader/Loader';\r\nimport PageNotFound from './views/Pages/404/PageNotFound';\r\n\r\n// Containers\r\nconst FrontEndLayout = React.lazy(() => import('./containers/FrontEndLayout/FrontEndLayout'));\r\nconst CommonLayout = React.lazy(() => import('./containers/CommonLayout/CommonLayout'));\r\nconst UserLayout = React.lazy(() => import('./containers/UserLayout/UserLayout'));\r\nconst AdminLayout = React.lazy(() => import('./containers/AdminLayout/AdminLayout'));\r\n\r\nconst loading = () => <Loader />;\r\n\r\nclass App extends Component {\r\n  render(){\r\n    return (\r\n      <Router>\r\n          <React.Suspense fallback={loading()}>\r\n            <Switch>\r\n              <PrivateRoute path=\"/admin\" name=\"Admin\" component={AdminLayout} /> */}\r\n              <Route path=\"/common\" name=\"Common\" component={CommonLayout} />\r\n              <ProtectedRoute path=\"/user\" name=\"User\" component={UserLayout} />\r\n              <Route path=\"/advertiser\" name=\"Advertiser\" component={UserLayout} />\r\n              <Route path=\"/\" name=\"Home\" component={FrontEndLayout} />\r\n              <Route name=\"Page not found\" component={PageNotFound} />\r\n            </Switch>\r\n          </React.Suspense>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nconst PrivateRoute = ({ component, ...rest }) => {\r\n  return (\r\n    <Route {...rest} render={routeProps => {\r\n      return commonService.getAuth() && localStorage.getItem(\"role\") === \"admin\" ? (\r\n        renderMergedProps(component, routeProps, rest)\r\n      ) : (\r\n        <Redirect to={{\r\n          pathname: '/login',\r\n          state: { from: routeProps.location }\r\n        }}/>\r\n      );\r\n    }}/>\r\n  );\r\n};\r\n\r\nconst ProtectedRoute = ({ component, ...rest }) => {\r\n  return (\r\n    <Route {...rest} render={routeProps => {\r\n      return commonService.getAuth() && localStorage.getItem(\"role\") !== \"\" ? (\r\n        renderMergedProps(component, routeProps, rest)\r\n      ) : (\r\n        <Redirect to={{\r\n          pathname: '/login',\r\n          state: { from: routeProps.location }\r\n        }}/>\r\n      );\r\n    }}/>\r\n  );\r\n};\r\n\r\nconst renderMergedProps = (component, ...rest) => {\r\n  const finalProps = Object.assign({}, ...rest);\r\n  return (\r\n    React.createElement(component, finalProps)\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}